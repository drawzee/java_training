package lavasoft;

import jakarta.xml.ws.Service;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;

import javax.xml.namespace.QName;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * <b>A web service which performs GetIpAddress Lookups.</b>
 *
 * This class was generated by Apache CXF 4.0.0
 * 2023-04-14T14:35:02.235+03:00
 * Generated source version: 4.0.0
 *
 */
@WebServiceClient(name = "GeoIPService",
                  wsdlLocation = "file:/Users/nikolay.primizenkin/IdeaProjects/java_training/soap/src/main/resources/geoip.wsdl",
                  targetNamespace = "http://lavasoft.com/")
public class GeoIPService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://lavasoft.com/", "GeoIPService");
    public final static QName GeoIPServiceSoap = new QName("http://lavasoft.com/", "GeoIPServiceSoap");
    public final static QName GeoIPServiceSoap12 = new QName("http://lavasoft.com/", "GeoIPServiceSoap12");
    public final static QName GeoIPServiceHttpGet = new QName("http://lavasoft.com/", "GeoIPServiceHttpGet");
    public final static QName GeoIPServiceHttpPost = new QName("http://lavasoft.com/", "GeoIPServiceHttpPost");
    static {
        URL url = null;
        try {
            url = new URL("file:/Users/nikolay.primizenkin/IdeaProjects/java_training/soap/src/main/resources/geoip.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(GeoIPService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/Users/nikolay.primizenkin/IdeaProjects/java_training/soap/src/main/resources/geoip.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public GeoIPService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public GeoIPService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public GeoIPService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public GeoIPService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public GeoIPService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public GeoIPService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns GeoIPServiceSoap
     */
    @WebEndpoint(name = "GeoIPServiceSoap")
    public lavasoft.GeoIPServiceSoap getGeoIPServiceSoap() {
        return super.getPort(GeoIPServiceSoap, lavasoft.GeoIPServiceSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns GeoIPServiceSoap
     */
    @WebEndpoint(name = "GeoIPServiceSoap")
    public lavasoft.GeoIPServiceSoap getGeoIPServiceSoap(WebServiceFeature... features) {
        return super.getPort(GeoIPServiceSoap, lavasoft.GeoIPServiceSoap.class, features);
    }


    /**
     *
     * @return
     *     returns GeoIPServiceSoap
     */
    @WebEndpoint(name = "GeoIPServiceSoap12")
    public lavasoft.GeoIPServiceSoap getGeoIPServiceSoap12() {
        return super.getPort(GeoIPServiceSoap12, lavasoft.GeoIPServiceSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns GeoIPServiceSoap
     */
    @WebEndpoint(name = "GeoIPServiceSoap12")
    public lavasoft.GeoIPServiceSoap getGeoIPServiceSoap12(WebServiceFeature... features) {
        return super.getPort(GeoIPServiceSoap12, lavasoft.GeoIPServiceSoap.class, features);
    }


    /**
     *
     * @return
     *     returns GeoIPServiceHttpGet
     */
    @WebEndpoint(name = "GeoIPServiceHttpGet")
    public lavasoft.GeoIPServiceHttpGet getGeoIPServiceHttpGet() {
        return super.getPort(GeoIPServiceHttpGet, lavasoft.GeoIPServiceHttpGet.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns GeoIPServiceHttpGet
     */
    @WebEndpoint(name = "GeoIPServiceHttpGet")
    public lavasoft.GeoIPServiceHttpGet getGeoIPServiceHttpGet(WebServiceFeature... features) {
        return super.getPort(GeoIPServiceHttpGet, lavasoft.GeoIPServiceHttpGet.class, features);
    }


    /**
     *
     * @return
     *     returns GeoIPServiceHttpPost
     */
    @WebEndpoint(name = "GeoIPServiceHttpPost")
    public lavasoft.GeoIPServiceHttpPost getGeoIPServiceHttpPost() {
        return super.getPort(GeoIPServiceHttpPost, lavasoft.GeoIPServiceHttpPost.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns GeoIPServiceHttpPost
     */
    @WebEndpoint(name = "GeoIPServiceHttpPost")
    public lavasoft.GeoIPServiceHttpPost getGeoIPServiceHttpPost(WebServiceFeature... features) {
        return super.getPort(GeoIPServiceHttpPost, lavasoft.GeoIPServiceHttpPost.class, features);
    }

}
